{
	"rating": {
		"max": 10,
		"numRaters": 1331,
		"average": "9.3",
		"min": 0
	},
	"subtitle": "",
	"author": [
		"[美] Nicholas C. Zakas"
	],
	"pubdate": "2012-3-29",
	"tags": [
		{
			"count": 1711,
			"name": "JavaScript",
			"title": "JavaScript"
		},
		{
			"count": 739,
			"name": "Web前端开发",
			"title": "Web前端开发"
		},
		{
			"count": 428,
			"name": "前端开发",
			"title": "前端开发"
		},
		{
			"count": 351,
			"name": "javascript",
			"title": "javascript"
		},
		{
			"count": 320,
			"name": "前端",
			"title": "前端"
		},
		{
			"count": 270,
			"name": "编程",
			"title": "编程"
		},
		{
			"count": 266,
			"name": "Web开发",
			"title": "Web开发"
		},
		{
			"count": 258,
			"name": "计算机",
			"title": "计算机"
		}
	],
	"origin_title": "Professional JavaScript for Web",
	"image": "https://img3.doubanio.com\/mpic\/s8958650.jpg",
	"binding": "平装",
	"translator": [
		"李松峰",
		"曹力"
	],
	"catalog": "目　　录\n第1章　JavaScript简介　　1\n1.1　JavaScript简史　　1\n1.2　JavaScript实现　　2\n1.2.1　ECMAScript　　3\n1.2.2　文档对象模型（DOM）　　5\n1.2.3　浏览器对象模型（BOM）　　8\n1.3　JavaScript版本　　8\n1.4　小结　　9\n第2章　在HTML中使用JavaScript　　10\n2.1　<script>元素　　10\n2.1.1　标签的位置　　12\n2.1.2　延迟脚本　　13\n2.1.3　异步脚本　　13\n2.1.4　在XHTML中的用法　　14\n2.1.5　不推荐使用的语法　　16\n2.2　嵌入代码与外部文件　　16\n2.3　文档模式　　16\n2.4　<noscript>元素　　18\n2.5　小结　　18\n第3章　基本概念　　19\n3.1　语法　　19\n3.1.1　区分大小写　　19\n3.1.2　标识符　　19\n3.1.3　注释　　20\n3.1.4　严格模式　　20\n3.1.5　语句　　20\n3.2　关键字和保留字　　21\n3.3　变量　　22\n3.4　数据类型　　23\n3.4.1　typeof操作符　　23\n3.4.2　Undefined类型　　24\n3.4.3　Null类型　　25\n3.4.4　Boolean类型　　26\n3.4.5　Number类型　　27\n3.4.6　String类型　　32\n3.4.7　Object类型　　35\n3.5　操作符　　36\n3.5.1　一元操作符　　36\n3.5.2　位操作符　　39\n3.5.3　布尔操作符　　44\n3.5.4　乘性操作符　　47\n3.5.5　加性操作符　　48\n3.5.6　关系操作符　　50\n3.5.7　相等操作符　　51\n3.5.8　条件操作符　　53\n3.5.9　赋值操作符　　53\n3.5.10　逗号操作符　　54\n3.6　语句　　54\n3.6.1　if语句　　54\n3.6.2　do-while语句　　55\n3.6.3　while语句　　55\n3.6.4　for语句　　56\n3.6.5　for-in语句　　57\n3.6.6　label语句　　58\n3.6.7　break和continue语句　　58\n3.6.8　with语句　　60\n3.6.9　switch语句　　60\n3.7　函数　　62\n3.7.1　理解参数　　64\n3.7.2　没有重载　　66\n3.8　小结　　67\n第4章　变量、作用域和内存问题　　68\n4.1　基本类型和引用类型的值　　68\n4.1.1　动态的属性　　68\n4.1.2　复制变量值　　69\n4.1.3　传递参数　　70\n4.1.4　检测类型　　72\n4.2　执行环境及作用域　　73\n4.2.1　延长作用域链　　75\n4.2.2　没有块级作用域　　76\n4.3　垃圾收集　　78\n4.3.1　标记清除　　78\n4.3.2　引用计数　　79\n4.3.3　性能问题　　80\n4.3.4　管理内存　　81\n4.4　小结　　81\n第5章　引用类型　　83\n5.1　Object类型　　83\n5.2　Array类型　　86\n5.2.1　检测数组　　88\n5.2.2　转换方法　　89\n5.2.3　栈方法　　90\n5.2.4　队列方法　　91\n5.2.5　重排序方法　　92\n5.2.6　操作方法　　94\n5.2.7　位置方法　　95\n5.2.8　迭代方法　　96\n5.2.9　缩小方法　　97\n5.3　Date类型　　98\n5.3.1　继承的方法　　100\n5.3.2　日期格式化方法　　101\n5.3.3　日期\/时间组件方法　　102\n5.4　RegExp类型　　103\n5.4.1　RegExp实例属性　　105\n5.4.2　RegExp实例方法　　106\n5.4.3　RegExp构造函数属性　　107\n5.4.4　模式的局限性　　109\n5.5　Function类型　　110\n5.5.1　没有重载（深入理解）　　111\n5.5.2　函数声明与函数表达式　　111\n5.5.3　作为值的函数　　112\n5.5.4　函数内部属性　　113\n5.5.5　函数属性和方法　　116\n5.6　基本包装类型　　118\n5.6.1　Boolean类型　　120\n5.6.2　Number类型　　120\n5.6.3　String类型　　122\n5.7　单体内置对象　　130\n5.7.1　Global对象　　131\n5.7.2　Math对象　　134\n5.8　小结　　137\n第6章　面向对象的程序设计　　138\n6.1　理解对象　　138\n6.1.1　属性类型　　139\n6.1.2　定义多个属性　　142\n6.1.3　读取属性的特性　　143\n6.2　创建对象　　144\n6.2.1　工厂模式　　144\n6.2.2　构造函数模式　　144\n6.2.3　原型模式　　147\n6.2.4　组合使用构造函数模式和原型模式　　159\n6.2.5　动态原型模式　　159\n6.2.6　寄生构造函数模式　　160\n6.2.7　稳妥构造函数模式　　161\n6.3　继承　　162\n6.3.1　原型链　　162\n6.3.2　借用构造函数　　167\n6.3.3　组合继承　　168\n6.3.4　原型式继承　　169\n6.3.5　寄生式继承　　171\n6.3.6　寄生组合式继承　　172\n6.4　小结　　174\n第7章　函数表达式　　175\n7.1　递归　　177\n7.2　闭包　　178\n7.2.1　闭包与变量　　181\n7.2.2　关于this对象　　182\n7.2.3　内存泄漏　　183\n7.3　模仿块级作用域　　184\n7.4　私有变量　　186\n7.4.1　静态私有变量　　188\n7.4.2　模块模式　　189\n7.4.3　增强的模块模式　　191\n7.5　小结　　192\n第8章　BOM　　193\n8.1　window对象　　193\n8.1.1　全局作用域　　193\n8.1.2　窗口关系及框架　　194\n8.1.3　窗口位置　　197\n8.1.4　窗口大小　　198\n8.1.5　导航和打开窗口　　199\n8.1.6　间歇调用和超时调用　　203\n8.1.7　系统对话框　　205\n8.2　location对象　　207\n8.2.1　查询字符串参数　　207\n8.2.2　位置操作　　208\n8.3　navigator对象　　210\n8.3.1　检测插件　　211\n8.3.2　注册处理程序　　213\n8.4　screen对象　　214\n8.5　history对象　　215\n8.6　小结　　216\n第9章　客户端检测　　217\n9.1　能力检测　　217\n9.1.1　更可靠的能力检测　　218\n9.1.2　能力检测，不是浏览器检测　　220\n9.2　怪癖检测　　220\n9.3　用户代理检测　　221\n9.3.1　用户代理字符串的历史　　222\n9.3.2　用户代理字符串检测技术　　228\n9.3.3　完整的代码　　242\n9.3.4　使用方法　　245\n9.4　小结　　246\n第10章　DOM　　247\n10.1　节点层次　　247\n10.1.1　Node类型　　248\n10.1.2　Document类型　　253\n10.1.3　Element类型　　261\n10.1.4　Text类型　　270\n10.1.5　Comment类型　　273\n10.1.6　CDATASection类型　　274\n10.1.7　DocumentType类型　　274\n10.1.8　DocumentFragment类型　　275\n10.1.9　Attr类型　　276\n10.2　DOM操作技术　　277\n10.2.1　动态脚本　　277\n10.2.2　动态样式　　279\n10.2.3　操作表格　　281\n10.2.4　使用NodeList　　283\n10.3　小结　　284\n第11章　DOM扩展　　286\n11.1　选择符API　　286\n11.1.1　querySelector()方法　　286\n11.1.2　querySelectorAll()\n方法　　287\n11.1.3　matchesSelector()\n方法　　288\n11.2　元素遍历　　288\n11.3　HTML5　　289\n11.3.1　与类相关的扩充　　289\n11.3.2　焦点管理　　291\n11.3.3　HTMLDocument的变化　　292\n11.3.4　字符集属性　　293\n11.3.5　自定义数据属性　　293\n11.3.6　插入标记　　294\n11.3.7　scrollIntoView()方法　　298\n11.4　专有扩展　　298\n11.4.1　文档模式　　298\n11.4.2　children属性　　299\n11.4.3　contains()方法　　300\n11.4.4　插入文本　　301\n11.4.5　滚动　　303\n11.5　小结　　304\n第12章　DOM2和DOM3　　305\n12.1　DOM变化　　305\n12.1.1　针对XML命名空间的变化　　306\n12.1.2　其他方面的变化　　309\n12.2　样式　　312\n12.2.1　访问元素的样式　　313\n12.2.2　操作样式表　　317\n12.2.3　元素大小　　320\n12.3　遍历　　326\n12.3.1　NodeIterator　　328\n12.3.2　TreeWalker　　330\n12.4　范围　　332\n12.4.1　DOM中的范围　　332\n12.4.2　IE8及更早版本中的范围　　340\n12.5　小结　　343\n第13章　事件　　345\n13.1　事件流　　345\n13.1.1　事件冒泡　　346\n13.1.2　事件捕获　　346\n13.1.3　DOM事件流　　347\n13.2　事件处理程序　　348\n13.2.1　HTML事件处理程序　　348\n13.2.2　DOM0级事件处理程序　　350\n13.2.3　DOM2级事件处理程序　　351\n13.2.4　IE事件处理程序　　352\n13.2.5　跨浏览器的事件处理程序　　353\n13.3　事件对象　　355\n13.3.1　DOM中的事件对象　　355\n13.3.2　IE中的事件对象　　358\n13.3.3　跨浏览器的事件对象　　360\n13.4　事件类型　　362\n13.4.1　UI事件　　362\n13.4.2　焦点事件　　367\n13.4.3　鼠标与滚轮事件　　368\n13.4.4　键盘与文本事件　　379\n13.4.5　复合事件　　384\n13.4.6　变动事件　　385\n13.4.7　HTML5事件　　388\n13.4.8　设备事件　　395\n13.4.9　触摸与手势事件　　399\n13.5　内存和性能　　402\n13.5.1　事件委托　　402\n13.5.2　移除事件处理程序　　404\n13.6　模拟事件　　405\n13.6.1　DOM中的事件模拟　　405\n13.6.2　IE中的事件模拟　　410\n13.7　小结　　411\n第14章　表单脚本　　412\n14.1　表单的基础知识　　412\n14.1.1　提交表单　　413\n14.1.2　重置表单　　414\n14.1.3　表单字段　　414\n14.2　文本框脚本　　419\n14.2.1　选择文本　　420\n14.2.2　过滤输入　　423\n14.2.3　自动切换焦点　　426\n14.2.4　HTML5约束验证API　　427\n14.3　选择框脚本　　431\n14.3.1　选择选项　　432\n14.3.2　添加选项　　434\n14.3.3　移除选项　　435\n14.3.4　移动和重排选项　　435\n14.4　表单序列化　　436\n14.5　富文本编辑　　438\n14.5.1　使用contenteditable\n属性　　438\n14.5.2　操作富文本　　439\n14.5.3　富文本选区　　441\n14.5.4　表单与富文本　　443\n14.6　小结　　443\n第15章　使用Canvas绘图　　445\n15.1　基本用法　　445\n15.2　2D上下文　　446\n15.2.1　填充和描边　　446\n15.2.2　绘制矩形　　447\n15.2.3　绘制路径　　449\n15.2.4　绘制文本　　451\n15.2.5　变换　　453\n15.2.6　绘制图像　　456\n15.2.7　阴影　　457\n15.2.8　渐变　　458\n15.2.9　模式　　460\n15.2.10　使用图像数据　　460\n15.2.11　合成　　462\n15.3　WebGL　　463\n15.3.1　类型化数组　　463\n15.3.2　WebGL上下文　　468\n15.3.3　支持　　478\n15.4　小结　　478\n第16章　HTML5脚本编程　　480\n16.1　跨文档消息传递　　480\n16.2　原生拖放　　481\n16.2.1　拖放事件　　482\n16.2.2　自定义放置目标　　482\n16.2.3　dataTransfer对象　　483\n16.2.4　dropEffect与effectAllowed　　484\n16.2.5　可拖动　　485\n16.2.6　其他成员　　485\n16.3　媒体元素　　486\n16.3.1　属性　　487\n16.3.2　事件　　488\n16.3.3　自定义媒体播放器　　488\n16.3.4　检测编解码器的支持情况　　489\n16.3.5　Audio类型　　490\n16.4　历史状态管理　　491\n16.5　小结　　492\n第17章　错误处理与调试　　493\n17.1　浏览器报告的错误　　493\n17.1.1　IE　　493\n17.1.2　Firefox　　494\n17.1.3　Safari　　496\n17.1.4　Opera　　497\n17.1.5　Chrome　　498\n17.2　错误处理　　499\n17.2.1　try-catch语句　　500\n17.2.2　抛出错误　　503\n17.2.3　错误（error）事件　　505\n17.2.4　处理错误的策略　　506\n17.2.5　常见的错误类型　　507\n17.2.6　区分致命错误和非致命\n错误　　510\n17.2.7　把错误记录到服务器　　511\n17.3　调试技术　　512\n17.3.1　将消息记录到控制台　　512\n17.3.2　将消息记录到当前页面　　515\n17.3.3　抛出错误　　515\n17.4　常见的IE错误　　516\n17.4.1　操作终止　　516\n17.4.2　无效字符　　518\n17.4.3　未找到成员　　518\n17.4.4　未知运行时错误　　519\n17.4.5　语法错误　　519\n17.4.6　系统无法找到指定资源　　519\n17.5　小结　　520\n第18章　JavaScript与XML　　521\n18.1　浏览器对XML DOM的支持　　521\n18.1.1　DOM2级核心　　521\n18.1.2　DOMParser类型　　522\n18.1.3　XMLSerializer类型　　523\n18.1.4　IE8及之前版本中的XML　　523\n18.1.5　跨浏览器处理XML　　527\n18.2　浏览器对XPath的支持　　529\n18.2.1　DOM3级XPath　　529\n18.2.2　IE中的XPath　　534\n18.2.3　跨浏览器使用XPath　　535\n18.3　浏览器对XSLT的支持　　537\n18.3.1　IE中的XSLT　　537\n18.3.2　XSLTProcessor类型　　541\n18.3.3　跨浏览器使用XSLT　　543\n18.4　小结　　544\n第19章　E4X　　546\n19.1　E4X的类型　　546\n19.1.1　XML类型　　546\n19.1.2　XMLList类型　　547\n19.1.3　Namespace类型　　548\n19.1.4　QName类型　　549\n19.2　一般用法　　550\n19.2.1　访问特性　　551\n19.2.2　其他节点类型　　552\n19.2.3　查询　　553\n19.2.4　构建和操作XML　　555\n19.2.5　解析和序列化　　557\n19.2.6　命名空间　　558\n19.3　其他变化　　559\n19.4　全面启用E4X　　560\n19.5　小结　　561\n第20章　JSON　　562\n20.1　语法　　562\n20.1.1　简单值　　562\n20.1.2　对象　　563\n20.1.3　数组　　564\n20.2　解析与序列化　　565\n20.2.1　JSON对象　　565\n20.2.2　序列化选项　　566\n20.2.3　解析选项　　569\n20.3　小结　　570\n第21章　Ajax与Comet　　571\n21.1　XMLHttpRequest对象　　571\n21.1.1　XHR的用法　　573\n21.1.2　HTTP头部信息　　575\n21.1.3　GET请求　　576\n21.1.4　POST请求　　577\n21.2　XMLHttpRequest 2级　　578\n21.2.1　FormData　　578\n21.2.2　超时设定　　579\n21.2.3　overrideMimeType()\n方法　　580\n21.3　进度事件　　580\n21.3.1　load事件　　580\n21.3.2　progress事件　　581\n21.4　跨源资源共享　　582\n21.4.1　IE对CORS的实现　　582\n21.4.2　其他浏览器对CORS的\n实现　　584\n21.4.3　Preflighted Reqeusts　　584\n21.4.4　带凭据的请求　　585\n21.4.5　跨浏览器的CORS　　585\n21.5　其他跨域技术　　586\n21.5.1　图像Ping　　586\n21.5.2　JSONP　　587\n21.5.3　Comet　　588\n21.5.4　服务器发送事件　　590\n21.5.5　Web Sockets　　591\n21.5.6　SSE与Web Sockets　　593\n21.6　安全　　593\n21.7　小结　　594\n第22章　高级技巧　　596\n22.1　高级函数　　596\n22.1.1　安全的类型检测　　596\n22.1.2　作用域安全的构造函数　　597\n22.1.3　惰性载入函数　　600\n22.1.4　函数绑定　　602\n22.1.5　函数柯里化　　604\n22.2　防篡改对象　　606\n22.2.1　不可扩展对象　　606\n22.2.2　密封的对象　　607\n22.2.3　冻结的对象　　608\n22.3　高级定时器　　609\n22.3.1　重复的定时器　　610\n22.3.2　Yielding Processes　　612\n22.3.3　函数节流　　614\n22.4　自定义事件　　616\n22.5　拖放　　618\n22.5.1　修缮拖动功能　　620\n22.5.2　添加自定义事件　　622\n22.6　小结　　624\n第23章　离线应用与客户端存储　　626\n23.1　离线检测　　626\n23.2　应用缓存　　627\n23.3　数据存储　　628\n23.3.1　Cookie　　629\n23.3.2　IE用户数据　　637\n23.3.3　Web存储机制　　638\n23.3.4　IndexedDB　　643\n23.4　小结　　654\n第24章　最佳实践　　656\n24.1　可维护性　　656\n24.1.1　什么是可维护的代码　　656\n24.1.2　代码约定　　657\n24.1.3　松散耦合　　659\n24.1.4　编程实践　　662\n24.2　性能　　666\n24.2.1　注意作用域　　666\n24.2.2　选择正确方法　　667\n24.2.3　最小化语句数　　672\n24.2.4　优化DOM交互　　673\n24.3　部署　　676\n24.3.1　构建过程　　676\n24.3.2　验证　　677\n24.3.3　压缩　　679\n24.4　小结　　681\n第25章　新兴的API　　682\n25.1　requestAnimationFrame()　　682\n25.1.1　早期动画循环　　682\n25.1.2　循环间隔的问题　　683\n25.1.3　mozRequestAnimation-Frame　　683\n25.1.4　webkitRequestAnima-tionFrame与msRequest-AnimationFrame　　685\n25.2　Page Visibility API　　686\n25.3　Geolocation API　　687\n25.4　File API　　689\n25.4.1　FileReader类型　　690\n25.4.2　读取部分内容　　692\n25.4.3　对象URL　　693\n25.4.4　读取拖放的文件　　694\n25.4.5　使用XHR上传文件　　695\n25.5　Web计时　　696\n25.6　Web Workers　　697\n25.6.1　使用Worker　　697\n25.6.2　Worker全局作用域　　698\n25.6.3　包含其他脚本　　699\n25.6.4　Web Workers的未来　　700\n25.7　小结　　700\n附录A　ECMAScript Harmony　　701\n附录B　严格模式　　717\n附录C　JavaScript库　　723\n附录D　JavaScript工具　　727\n",
	"pages": "748",
	"images": {
		"small": "https://img3.doubanio.com\/spic\/s8958650.jpg",
		"large": "https://img3.doubanio.com\/lpic\/s8958650.jpg",
		"medium": "https://img3.doubanio.com\/mpic\/s8958650.jpg"
	},
	"alt": "https:\/\/book.douban.com\/subject\/10546125\/",
	"id": "10546125",
	"publisher": "人民邮电出版社",
	"isbn10": "7115275793",
	"isbn13": "9787115275790",
	"title": "JavaScript高级程序设计（第3版）",
	"url": "https:\/\/api.douban.com\/v2\/book\/10546125",
	"alt_title": "Professional JavaScript for Web",
	"author_intro": "作者简介：\nNicholas C. Zakas（尼古拉斯•泽卡斯）世界顶级Web技术专家，现为雅虎公司界面呈现架构师，负责My Yahoo!和雅虎首页等大访问量站点的设计。尼古拉斯拥有丰富的Web开发和界面设计经验，曾经参与许多世界级大公司的Web解决方案开发。他还是High Performance JavaScript一书的作者，并与他人合作撰写了Professional Ajax和Even Faster Web Sites。尼古拉斯拥有梅里马克学院计算机科学学士学位和埃迪柯特学院的MBA学位。他的个人网站是www.nczonline.net，他的Twitter别名是@slicknet。",
	"summary": "本书是JavaScript 超级畅销书的最新版。ECMAScript 5 和HTML5 在标准之争中双双胜出，使大量专有实现和客户端扩展正式进入规范，同时也为JavaScript 增添了很多适应未来发展的新特性。本书这一版除增加5 章全新内容外，其他章节也有较大幅度的增补和修订，新内容篇幅约占三分之一。全书从JavaScript 语言实现的各个组成部分——语言核心、DOM、BOM、事件模型讲起，深入浅出地探讨了面向对象编程、Ajax 与Comet 服务器端通信，HTML5 表单、媒体、Canvas（包括WebGL）及Web Workers、地理定位、跨文档传递消息、客户端存储（包括IndexedDB）等新API，还介绍了离线应用和与维护、性能、部署相关的最佳开发实践。本书附录展望了未来的API 和ECMAScript Harmony 规范。\n本书适合有一定编程经验的Web 应用开发人员阅读，也可作为高校及社会实用技术培训相关专业课程的教材。",
	"series": {
		"id": "660",
		"title": "图灵程序设计丛书"
	},
	"price": "99.00元"
}